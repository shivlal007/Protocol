`timescale 1ns / 1ps


module I2C_M1(
  
 input clk,
 input rst,
 input newd,
 input wr,
 input [7:0] wdata,
 input [6:0] addr, /////8-bit  7-bit : addr 1-bit : mode
   
 input sda_i,  
 output reg sda_t,  // if sda_t=0 then sda_o is on if sda_t=1 then sda_i is on 
 output reg sda_o,
 
 output scl,
 output reg [7:0] rdata,
 output reg done
 );
  
 reg x,x2,x3; 
 reg sclt, donet; 
 reg [7:0] rdatat; 
 reg [7:0] addrt;
 reg [3:0] state,nstate;
 reg sclk_ref = 0;
 integer count = 0;
 integer i = 0;
  
 parameter idle = 0, check_wr = 1, wstart = 2, wsend_addr = 3, waddr_ack = 4, 
                wsend_data = 5, wdata_ack = 6, wstop = 7, rsend_addr = 8, 
                raddr_ack = 9, rsend_data = 10,
                rdata_ack = 11, rstop = 12 ;
  
 always@(posedge clk)
    begin
      if(count <= 9) 
        begin
            count <= count + 1;     
        end
      else
        begin
            count     <= 0; 
            sclk_ref  <= ~sclk_ref;
        end	      
    end
  
  
  
  always@(posedge sclk_ref)
    begin 
      if(rst == 1'b1)
         begin
           state <= idle;
           sclt  <= 1'b1;
           sda_t  <= 1'b0;   // send sda = 0 as default
           sda_o <= 1'b1;
           donet <= 1'b0;
         end
       else 
            state <= nstate;
    end
    
    
  always@(posedge sclk_ref)  
    begin
        if (state ==  wsend_addr)
         if(i <= 7) 
              i = i + 1;
          
       
        if (state ==  waddr_ack)
           if(x == 1'b1)
              i = i + 1;
        if (state == wsend_data) 
            if(i <= 7) 
              i <= i + 1;
        if (state ==  rsend_addr)
           if(i <= 7) 
              i = i + 1;
        if (state == rsend_data)
            if(i <= 7) 
              i <= i + 1;      
          
    end      
          
            
  always@(*)          
         begin
         case(state)
           idle :  begin //state 0
                      done <= 1'b0;
                      sclt <= 1'b1;
                      sda_t <= 1'b0; //send sda = 1 as start bit
                      sda_o <=1'b1;
                        if(newd == 1'b1) 
                            nstate  <= wstart;
                        else 
                            nstate <= idle;         
                   end
         
           wstart: begin // state 2
                      sda_t  <= 1'b0; //send sda = 0 as start bit
                      sda_o  <= 1'b0;
                      sclt  <= 1'b1;
                      nstate <= check_wr;
                      addrt <= {addr,wr};
                    end
            
           check_wr: begin // state 1 
                        if(wr == 1'b1)  // wr = 1 write data
                         begin
                            nstate <= wsend_addr;
                            sda_t  <= 1'b0;   // to send 7 bit address and wr bit
                            sda_o <= addrt[0];
                            i <= 1;
                         end
                        else        //wr =0 read data
                         begin
                            nstate <= rsend_addr;
                            sda_t  <= 1'b0;   // to send 7 bit address and wr bit
                            sda_o <= addrt[0];
                            i <= 1;
                         end
                    end
            
           wsend_addr : begin  // state 3 
                        //i <= 1'b1;
                         if(i <= 7) 
                              begin
                                sda_o  <= addrt[i];
                                //i <= i + 1;
                              end
                            else
                              begin
                                //i <= 0;
                                nstate <= waddr_ack;
                                //sda_t  <= 1'b1; // to receive ack bit for add received
                                    if(sda_i == 1'b0)
                                        x= 1;
                                    else //if (sda_i == 1'b1)
                                        x=0; 
                              end   
                        end
             
           waddr_ack : begin  //state 4
                         i <= 1;
                         sda_t  <= 1'b1; // to receive ack bit for add received
                         if(x == 1) 
                            begin
                                nstate <= wsend_data;
                                sda_t  <= 1'b0;   // to send 8 bit data 
                                sda_o  <= wdata[0];
                                //i <= i + 1;
                            end
                         else
                           nstate <= waddr_ack;
                       end
         
           wsend_data : begin// state 5
                         if(i <= 7) 
                            begin
                               sda_o  <= wdata[i]; 
                               //i <= i + 1;
                               sda_t  <= 1'b0;
                             end
                         else 
                             begin
                                //i <= 0;
                                nstate <= wdata_ack;
                                sda_t  <= 1'b1;   // to receive ack bit for data received
                                     if (sda_i==0)
                                         x2= 1;
                                     else 
                                         x2=0;
                                end
                         end
                         
         wdata_ack :  begin //STATE 6
                       i <=0;
                        if(x2 == 1'b1) 
                            begin
                                nstate <= wstop;
                                sda_t  <= 1'b0;     // send sda = 0 as stop bit
                                sda_o <= 1'b0;
                                sclt <= 1'b1;
                            end
                         else 
                            begin
                                nstate <= wdata_ack;
                            end 
                       end
         
         wstop: begin
                      sda_t  <= 1'b0;   // send sda = 1 as stop bit
                      sda_o  <=  1'b1;
                      sclt  <=  1'b1;
                      nstate <=  idle;
                      done  <=  1'b1;  
                end
         
         ///////////////////////read state

         rsend_addr : begin
                        if(i <= 7) 
                            begin
                              sda_t  <= 1'b0;   // to send 7 bit address and wr bit
                              sda_o  <= addrt[i];
                              //i <= i + 1;
                            end
                        else
                            begin
                              i <= 0;
                              nstate <= raddr_ack;
                              sda_t <= 1'b1; // to receive ack bit for add received
                                if (sda_i ==0)
                                    x3 = 1;
                                else
                                    x3 = 0;
                            end   
                    end
         
           raddr_ack : begin   //state 9
                        if(x3 == 1'b1) 
                            begin
                                nstate  <= rsend_data;
                                sda_t <= 1'b1; // read incoming 8 bit date 
                                sda_o <= 1'b0;
                                rdata[0] <= sda_i;
                                i <= 1;
                            end
                        else
                            nstate <= raddr_ack;
                       end
                 
           rsend_data : begin  // state 10
                            if(i <= 7) 
                              begin
                                 //i <= i + 1;
                                 nstate <= rsend_data;
                                 rdata[i] <= sda_i;
                              end
                             else
                              begin
                                 i <= 0;
                                 nstate <= rdata_ack;
                                 sda_t  <= 1'b0;  // send ack bit
                                 sda_o <= 1'b0;  
                              end         
                            end
          
           rdata_ack : begin // state 11
                            nstate <= rstop;
                            sda_t  <= 1'b0;  // send sda = 0 as stop bit
                            sda_o <= 1'b0;  
                            sclt <= 1'b1;
                        end 
                           
           rstop:  begin   // state 12
                        sda_t  <= 1'b0; //send sda = 1 as stop bit
                        sda_o  <=  1'b1;
                        sclt <=  1'b1;
                        nstate <=  idle;
                        done  <=  1'b1;  
                    end
                    
           default : nstate <= idle;
        endcase
        end
 
  
 assign scl = (( state == wstart) || ( state == wstop) || ( state == rstop)) ? sclt : sclk_ref;
 
endmodule
